package WordyGame;


import com.java.fingrp7_java.gui_package.clientController.Wordy_MatchMakingController;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * WordyGame/Game.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from WordyGame.idl
 * Saturday, April 29, 2023 11:47:14 AM SGT
 */

public final class Game implements org.omg.CORBA.portable.IDLEntity
{
  public int gameID = (int)0;
  public String status = null;
  public int hostID = (int)0;
  public int winnerID = (int)0;
  public HashMap<Integer, char[]> lettersPerRound = new HashMap<Integer, char[]>();

  public ArrayList<Integer> players;
  public ArrayList<WordyGamePlayer> wgPlayers = new ArrayList<>();

  public ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);
  public String roundStatus;
  public int round;
  public int roundCounter = 10;
  public int timerCounter = 11;
  public int readyCounter = 10;
  public boolean[] playerReadyStatus;


  WordyGamePlayer host;
  WordyGamePlayer winner;


  public static Stage stage;

  public Runnable tenSecondGameTimer = new Runnable() {
    @Override
    public void run() {
      timerCounter--;
      System.out.println(timerCounter);
      if (timerCounter == 0) {
        if (players.size() > 1) {
          System.out.println("Match Starting");
          round = 1;
          status = "Match Started";
//          playerReadyStatus = new boolean[players.size()];
          scheduler.shutdown();
        } else {
          System.out.println("No other players have joined123");
          gameID = 0;
          status = null;
          scheduler.shutdown();
        }
      }
    }
  };

  public Runnable tenSecondRoundTimer = new Runnable() {
    @Override
    public void run() {
      roundCounter--;
      if (roundCounter == 0) {
        scheduler.shutdown();
      }
    }
  };

  public Runnable readyChecker = new Runnable() {
    @Override
    public void run() {
      readyCounter--;
      System.out.println(readyCounter);
      if (readyCounter == 0) {
        for (WordyGamePlayer wp :
                wgPlayers) {
          System.out.println(wp.status);
          if (wp.status.equalsIgnoreCase("ready")) {
            if (wgPlayers.get(wgPlayers.size() - 1) == wp) {
              System.out.println("g na");
              roundStatus = "Start";
              scheduler.shutdown();
            }
          } else if (readyCounter == 0) {
            System.out.println("g naaa");
            roundStatus = "Start";
            scheduler.shutdown();
          }
        }
      }
    }
  };

  public Game ()
  {
    gameID = 0;
    status = "";
    winnerID = 0;
    hostID = 0;
  } // ctor

  public Game (int _gameID, String _status, int _hostID, int _winnerID)
  {
    gameID = _gameID;
    status = _status;
    hostID = _hostID;
    winnerID = _winnerID;
  } // ctor

  public Game (int gameID, int hostID) {
    players = new ArrayList<>();
    players.add(hostID);
    timerCounter = 11;
//    readyCounter = 15;
    this.gameID = gameID;
    this.hostID = hostID;
    status = "Waiting";
    winnerID = 0;
  }

  public boolean tenSecondGameTimer() {
    scheduler.scheduleAtFixedRate(tenSecondGameTimer, 0, 1, TimeUnit.SECONDS);
    Wordy_MatchMakingController.timer = timerCounter;

    while (!scheduler.isShutdown()) {
      if (scheduler.isShutdown()) {
        if (Wordy_MatchMakingController.timer == 0) {
          System.out.println("zero na");
        }
        return true;
      }
    }
    return false;
  }

  public void createSchedule(){
    if (scheduler.isShutdown() && roundCounter != 0) {
      scheduler = Executors.newScheduledThreadPool(10);
    }
  }

  public boolean playerChecker() {
    scheduler.scheduleAtFixedRate(readyChecker, 0,1,TimeUnit.SECONDS);
    while (!scheduler.isShutdown()) {
      if (scheduler.isShutdown()) {
        return true;
      }
    }
    return false;
  }

} // class Game
