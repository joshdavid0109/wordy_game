package WordyGame;


import com.java.fingrp7_java.Server.DataAccessClass;
import com.java.fingrp7_java.Server.Word;
import com.java.fingrp7_java.gui_package.clientController.*;
import javafx.stage.Stage;

import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
* WordyGame/Game.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from WordyGame.idl
* Tuesday, May 16, 2023 6:27:20 PM SGT
*/

public final class Game implements org.omg.CORBA.portable.IDLEntity
{
  public int gameID = (int)0;
  public String status = null;
  public int hostID = (int)0;
  public int winnerID = (int)0;
  public HashMap<Integer, char[]> lettersPerRound = new HashMap<Integer, char[]>();
  public HashMap<Integer, String> winnerPerRound = new HashMap<Integer, String>();
  public ArrayList<Integer> players;
  public ArrayList<WordyGamePlayer> wgPlayers = new ArrayList<>();

  public ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);
  public String roundStatus;
  public int round;
  public int roundCounter = 11;
  public int timerCounter = 3;
  public int readyCounter = 10;
  public boolean isDraw = false;
  public ArrayList<String> strings;
  public boolean roundStat = false;

  DataAccessClass dataAccessClass = new DataAccessClass();
  public ArrayList<Word> words ;
  public WordyGamePlayer host;
  public WordyGamePlayer winner;

  public Runnable tenSecondGameTimer = new Runnable() {
    @Override
    public void run() {
      System.out.println(timerCounter);
      timerCounter--;
      if (timerCounter == 0) {
        if (players.size() > 1) {
          System.out.println("Match Starting");
          round = 1;
          status = "Match Started";
          dataAccessClass.writeGame(gameID);
//          playerReadyStatus = new boolean[players.size()];
          scheduler.shutdown();
        } else {
          System.out.println("No other players have joined");
          gameID = 0;
          status = null;
          timerCounter =3;
          scheduler.shutdown();
        }
      }
    }
  };

  public Runnable tenSecondRoundTimer = new Runnable() {
    @Override
    public void run() {
      System.out.println(roundCounter);
      roundCounter--;
      if (roundCounter <0) {
        //otherwise, walang gagawin, since tie ang round
        try {
          Thread.sleep(2000);
        } catch (InterruptedException e) {
          throw new RuntimeException(e);
        }
        checkRoundWin();
        scheduler.shutdown();
      }
    }
  };

  public Runnable readyChecker = new Runnable() {
    @Override
    public void run() {
      System.out.println(readyCounter);
      readyCounter--;
      if (readyCounter == 0 && roundStat) {
        scheduler.shutdown();
        roundTimer();
      } else if (readyCounter == 0){
        System.out.println("kung sino ready..");
        if (wgPlayers.size() == 2) {
          for (WordyGamePlayer wgp :
                  wgPlayers) {
            if (wgp.status.equalsIgnoreCase("ready")){
              winnerPerRound.put(round,String.valueOf(wgp.id));
              wgp.wins++;
              try {
                Thread.sleep(2000);
              } catch (InterruptedException e) {
                throw new RuntimeException(e);
              }

              round++;
              readyCounter = 10;
              roundCounter= 10;
              scheduler.shutdown();
            }
            wgp.status = "";
          }
        }else {
          scheduler.shutdown();
          roundTimer();
        }
      }else if (!roundStat) {
        for (WordyGamePlayer wp :
                wgPlayers) {
          System.out.println(wp.status);
          if (wp.status.equals("")) {
            break;
          }else if (wgPlayers.get(wgPlayers.size()-1) == wp && wp.status.equalsIgnoreCase("ready")){
            System.out.println("last player");
            readyCounter = 3;
            roundStat = true;
          }
        }
      }
    }
  };

  public Game ()
  {
    gameID = 0;
    status = "";
    timerCounter = 3;
    status = "Waiting";
    winnerID = 0;
    hostID = 0;
  } // ctor

  public Game (int _gameID, String _status, int _hostID, int _winnerID)
  {
    gameID = _gameID;
    status = _status;
    hostID = _hostID;
    winnerID = _winnerID;
  } // ctor

  public Game (int gameID, int hostID) {
    players = new ArrayList<>();
    players.add(hostID);
    timerCounter = 3;
//    readyCounter = 15;
    this.gameID = gameID;
    this.hostID = hostID;
    status = "Waiting";
    winnerID = 0;
  }

  public boolean tenSecondGameTimer() {
    scheduler.scheduleAtFixedRate(tenSecondGameTimer, 0, 1, TimeUnit.SECONDS);
    Wordy_MatchMakingController.timer = timerCounter;

    while (!scheduler.isShutdown()) {
      if (scheduler.isShutdown()) {
        if (Wordy_MatchMakingController.timer == 0) {
          System.out.println("zero na");
        }
        return true;
      }
    }
    return false;
  }

  public void createSchedule(){
    if (scheduler.isShutdown() && roundCounter != 0) {
      scheduler = Executors.newScheduledThreadPool(10);
    }
  }

  public boolean playerChecker() {
//    if (scheduler.isShutdown()) {
    if (readyCounter == 0)
      scheduler.shutdown();
    else {
      readyCounter = 10;
      scheduler = Executors.newScheduledThreadPool(10);
      Wordy_MatchMakingController.timer = readyCounter;
      scheduler.scheduleAtFixedRate(readyChecker, 0, 1, TimeUnit.SECONDS);
    }
//    }
    while (!scheduler.isShutdown()) {
      if (scheduler.isShutdown()) {
        return true;
      }
    }
    return false;
  }

  public void roundTimer() {
    if (roundCounter == 0)
      scheduler.shutdown();
    else {
      scheduler = Executors.newScheduledThreadPool(10);
      scheduler.scheduleAtFixedRate(tenSecondRoundTimer, 0, 1, TimeUnit.SECONDS);
      Wordy_InGameController2.roundTime = roundCounter;
    }
  }

  public void checkRoundWin() {
    System.out.println("round check");
    ArrayList<Word> words;
    boolean isDraw =false;
    try {
      words = dataAccessClass.getWords(gameID, round);
    } catch (SQLException e) {
      throw new RuntimeException(e);
    }

    System.out.println("Winner words");

    ArrayList<Word> winnerWords = new ArrayList<>();

    for (Word w :
            words) {
      for (Word w1 :
              words) {
        if (w.getWord().length() == w1.getWord().length() && w.getUserID() != w1.getUserID())
          isDraw = true;
        winnerWords.add(w);
      }
    }

    if (isDraw) {
      System.out.println("hello draw");
    } else  {
      System.out.println("may winner");
    }


    if (!isDraw) { // if there is only one winner
      System.out.println("1 winner word");
      boolean winC = false;
      for (Word ww :
              winnerWords) {
        System.out.println(ww.getUserID());
          for (WordyGamePlayer wgp :
                  wgPlayers) {
            wgp.status = "";
            System.out.println(ww.getUserID() + "win" + wgp.id);
            if (ww.getUserID() == wgp.id) {
              System.out.println("adding win to player " + wgp.id);
              winnerPerRound.put(round, String.valueOf(wgp.id));
              dataAccessClass.writeToRound(gameID, round, wgp.id, ww.getWord());
              wgp.wins++; // increment win sa winner
              winC = true;
              break;
            }
          }
          break;
      }
    } else {
      for (Word w1 :
              winnerWords) {
                    dataAccessClass.writeToRound(gameID, round, 0, w1.getWord());
                    break;
            }
      }

    System.out.println("setting all status to empty");
    for (WordyGamePlayer wgp :
            wgPlayers) {
      wgp.status = "";
      System.out.println(wgp.status);
    }
    roundStat =false;
    roundCounter = 10;
    readyCounter = 10;
    winnerWords.clear();
    try {
      Thread.sleep(2000);
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
    round++;
  }

} // class Game
